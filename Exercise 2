import random
import concurrent.futures
import threading
import time


raising_hand = threading.Lock()
teacher_lock = threading.Lock()
teacher_lock.acquire()
students_up = []
students_answered = []


def student(id_s):
   global raising_hand, teacher_lock
   while True:
       time.sleep(random.uniform(1, 10))
       with raising_hand:
           print(f"Student {id_s} - Raised hand")
           students_up.append(id_s)


           while id_s not in students_answered:
               raising_hand.release()
               time.sleep(1)
               raising_hand.acquire()


           print(f"Student {id_s} - Answering")
           time.sleep(5)


def teacher(id_t):
   global raising_hand, teacher_lock
   while raising_hand.locked():
       with teacher_lock:
           with raising_hand:
               if students_up:
                   student_id = students_up.pop(0)
                   print(f"Teacher {id_t} - Calling on Student {student_id}")
                   students_answered.append(student_id)
                   teacher_lock.release()


with concurrent.futures.ThreadPoolExecutor(max_workers=52) as executor:
   for id_t in range(2):
       executor.submit(teacher, id_t + 1)
   for id_s in range(50):
       executor.submit(student, id_s + 1)

